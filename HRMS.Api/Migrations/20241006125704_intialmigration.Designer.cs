// <auto-generated />
using System;
using HRMS.Api.Data.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HRMS.Api.Migrations
{
    [DbContext(typeof(AppDbContex))]
    [Migration("20241006125704_intialmigration")]
    partial class intialmigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EmployeeRole", b =>
                {
                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("EmployeeID");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.HasKey("EmployeeId", "RoleId")
                        .HasName("EmployeeRole_EmployeeID_RoleID");

                    b.HasIndex("RoleId");

                    b.ToTable("EmployeeRole", (string)null);
                });

            modelBuilder.Entity("HRMS.Api.Data.Entities.Company", b =>
                {
                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("CompanyID");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Website")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CompanyId");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("HRMS.Api.Data.Entities.Department", b =>
                {
                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("DepartmentID");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("CompanyID");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DepartmentId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("HRMS.Api.Data.Entities.Employee", b =>
                {
                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("EmployeeID");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("CompanyID");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("DepartmentID");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<DateTime?>("JoinDate")
                        .HasColumnType("date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long?>("ManagerId")
                        .HasColumnType("bigint")
                        .HasColumnName("ManagerID");

                    b.Property<string>("Position")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long?>("TeamLeadId")
                        .HasColumnType("bigint")
                        .HasColumnName("TeamLeadID");

                    b.HasKey("EmployeeId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("TeamLeadId");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("HRMS.Api.Data.Entities.HrmsRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("HRMS.Api.Data.Entities.HrmsUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DataOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HRMS.Api.Data.Entities.HrmsUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HrmsRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HrmsUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("HrmsRoleId");

                    b.HasIndex("HrmsUserId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("HRMS.Api.Data.Entities.LeaveApproval", b =>
                {
                    b.Property<long>("ApprovalId")
                        .HasColumnType("bigint")
                        .HasColumnName("ApprovalID");

                    b.Property<string>("ApprovalComments1")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ApprovalComments2")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ApprovalComments3")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ApprovalComments4")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ApprovalComments5")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("ApprovalDate1")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ApprovalDate2")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ApprovalDate3")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ApprovalDate4")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ApprovalDate5")
                        .HasColumnType("date");

                    b.Property<string>("ApprovalStatus1")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("ApprovalStatus2")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("ApprovalStatus3")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("ApprovalStatus4")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("ApprovalStatus5")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<long?>("ApproverId1")
                        .HasColumnType("bigint")
                        .HasColumnName("ApproverID1");

                    b.Property<long?>("ApproverId2")
                        .HasColumnType("bigint")
                        .HasColumnName("ApproverID2");

                    b.Property<long?>("ApproverId3")
                        .HasColumnType("bigint")
                        .HasColumnName("ApproverID3");

                    b.Property<long?>("ApproverId4")
                        .HasColumnType("bigint")
                        .HasColumnName("ApproverID4");

                    b.Property<long?>("ApproverId5")
                        .HasColumnType("bigint")
                        .HasColumnName("ApproverID5");

                    b.Property<DateTime?>("FinalApprovedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsFinalApproved")
                        .HasColumnType("bit");

                    b.Property<long?>("LeaveRequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("LeaveRequestID");

                    b.HasKey("ApprovalId")
                        .HasName("PK_LeaveApproval_ApprovalID");

                    b.HasIndex("ApproverId1");

                    b.HasIndex("ApproverId2");

                    b.HasIndex("ApproverId3");

                    b.HasIndex("ApproverId4");

                    b.HasIndex("ApproverId5");

                    b.HasIndex("LeaveRequestId");

                    b.ToTable("LeaveApproval", (string)null);
                });

            modelBuilder.Entity("HRMS.Api.Data.Entities.LeaveApprovalLevel", b =>
                {
                    b.Property<long>("LevelId")
                        .HasColumnType("bigint")
                        .HasColumnName("LevelID");

                    b.Property<int>("ApproverRoleId")
                        .HasColumnType("int")
                        .HasColumnName("ApproverRoleID");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("CompanyID");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LeaveTypeId")
                        .HasColumnType("int")
                        .HasColumnName("LeaveTypeID");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("NextLevelId")
                        .HasColumnType("bigint")
                        .HasColumnName("NextLevelID");

                    b.HasKey("LevelId")
                        .HasName("PK_LeaveApprovalLevel_LevelID");

                    b.HasIndex("ApproverRoleId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LeaveTypeId");

                    b.HasIndex("NextLevelId");

                    b.ToTable("LeaveApprovalLevel", (string)null);
                });

            modelBuilder.Entity("HRMS.Api.Data.Entities.LeaveBalance", b =>
                {
                    b.Property<long>("LeaveBalanceId")
                        .HasColumnType("bigint")
                        .HasColumnName("LeaveBalanceID");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("decimal(10,2)");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("EmployeeID");

                    b.Property<int?>("LeaveTypeId")
                        .HasColumnType("int")
                        .HasColumnName("LeaveTypeID");

                    b.HasKey("LeaveBalanceId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LeaveTypeId");

                    b.ToTable("LeaveBalance", (string)null);
                });

            modelBuilder.Entity("HRMS.Api.Data.Entities.LeaveRequest", b =>
                {
                    b.Property<long>("RequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("RequestID");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("EmployeeID");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("FinalStatus")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("LeaveTypeId")
                        .HasColumnType("int")
                        .HasColumnName("LeaveTypeID");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("RequestId")
                        .HasName("PK_LeaveRequest_RequestID");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LeaveTypeId");

                    b.ToTable("LeaveRequest", (string)null);
                });

            modelBuilder.Entity("HRMS.Api.Data.Entities.LeaveType", b =>
                {
                    b.Property<int>("LeaveTypeId")
                        .HasColumnType("int")
                        .HasColumnName("LeaveTypeID");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("CompanyID");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LeaveTypeId");

                    b.HasIndex("CompanyId");

                    b.ToTable("LeaveType", (string)null);
                });

            modelBuilder.Entity("HRMS.Api.Data.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EmployeeRole", b =>
                {
                    b.HasOne("HRMS.Api.Data.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.HasOne("HRMS.Api.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired();
                });

            modelBuilder.Entity("HRMS.Api.Data.Entities.Department", b =>
                {
                    b.HasOne("HRMS.Api.Data.Entities.Company", "Company")
                        .WithMany("Departments")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("HRMS.Api.Data.Entities.Employee", b =>
                {
                    b.HasOne("HRMS.Api.Data.Entities.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId");

                    b.HasOne("HRMS.Api.Data.Entities.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("HRMS.Api.Data.Entities.Employee", "Manager")
                        .WithMany("InverseManager")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("FK_Employee_Employee_EmployeeID");

                    b.HasOne("HRMS.Api.Data.Entities.Employee", "TeamLead")
                        .WithMany("InverseTeamLead")
                        .HasForeignKey("TeamLeadId")
                        .HasConstraintName("FK_Employee_Employee_EmployeeID_TeamLeadID");

                    b.Navigation("Company");

                    b.Navigation("Department");

                    b.Navigation("Manager");

                    b.Navigation("TeamLead");
                });

            modelBuilder.Entity("HRMS.Api.Data.Entities.HrmsUserRole", b =>
                {
                    b.HasOne("HRMS.Api.Data.Entities.HrmsRole", "HrmsRole")
                        .WithMany("HrmsUserRoles")
                        .HasForeignKey("HrmsRoleId");

                    b.HasOne("HRMS.Api.Data.Entities.HrmsUser", "HrmsUser")
                        .WithMany("HrmsUserRoles")
                        .HasForeignKey("HrmsUserId");

                    b.HasOne("HRMS.Api.Data.Entities.HrmsRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRMS.Api.Data.Entities.HrmsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HrmsRole");

                    b.Navigation("HrmsUser");
                });

            modelBuilder.Entity("HRMS.Api.Data.Entities.LeaveApproval", b =>
                {
                    b.HasOne("HRMS.Api.Data.Entities.Employee", "ApproverId1Navigation")
                        .WithMany("LeaveApprovalApproverId1Navigations")
                        .HasForeignKey("ApproverId1");

                    b.HasOne("HRMS.Api.Data.Entities.Employee", "ApproverId2Navigation")
                        .WithMany("LeaveApprovalApproverId2Navigations")
                        .HasForeignKey("ApproverId2");

                    b.HasOne("HRMS.Api.Data.Entities.Employee", "ApproverId3Navigation")
                        .WithMany("LeaveApprovalApproverId3Navigations")
                        .HasForeignKey("ApproverId3");

                    b.HasOne("HRMS.Api.Data.Entities.Employee", "ApproverId4Navigation")
                        .WithMany("LeaveApprovalApproverId4Navigations")
                        .HasForeignKey("ApproverId4");

                    b.HasOne("HRMS.Api.Data.Entities.Employee", "ApproverId5Navigation")
                        .WithMany("LeaveApprovalApproverId5Navigations")
                        .HasForeignKey("ApproverId5");

                    b.HasOne("HRMS.Api.Data.Entities.LeaveRequest", "LeaveRequest")
                        .WithMany("LeaveApprovals")
                        .HasForeignKey("LeaveRequestId");

                    b.Navigation("ApproverId1Navigation");

                    b.Navigation("ApproverId2Navigation");

                    b.Navigation("ApproverId3Navigation");

                    b.Navigation("ApproverId4Navigation");

                    b.Navigation("ApproverId5Navigation");

                    b.Navigation("LeaveRequest");
                });

            modelBuilder.Entity("HRMS.Api.Data.Entities.LeaveApprovalLevel", b =>
                {
                    b.HasOne("HRMS.Api.Data.Entities.Role", "ApproverRole")
                        .WithMany("LeaveApprovalLevels")
                        .HasForeignKey("ApproverRoleId")
                        .IsRequired();

                    b.HasOne("HRMS.Api.Data.Entities.Company", "Company")
                        .WithMany("LeaveApprovalLevels")
                        .HasForeignKey("CompanyId");

                    b.HasOne("HRMS.Api.Data.Entities.LeaveType", "LeaveType")
                        .WithMany("LeaveApprovalLevels")
                        .HasForeignKey("LeaveTypeId")
                        .IsRequired();

                    b.HasOne("HRMS.Api.Data.Entities.LeaveApprovalLevel", "NextLevel")
                        .WithMany("InverseNextLevel")
                        .HasForeignKey("NextLevelId")
                        .HasConstraintName("FK_LeaveApprovalLevel_LeaveApprovalLevel_LevelID");

                    b.Navigation("ApproverRole");

                    b.Navigation("Company");

                    b.Navigation("LeaveType");

                    b.Navigation("NextLevel");
                });

            modelBuilder.Entity("HRMS.Api.Data.Entities.LeaveBalance", b =>
                {
                    b.HasOne("HRMS.Api.Data.Entities.Employee", "Employee")
                        .WithMany("LeaveBalances")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("HRMS.Api.Data.Entities.LeaveType", "LeaveType")
                        .WithMany("LeaveBalances")
                        .HasForeignKey("LeaveTypeId")
                        .HasConstraintName("FK__LeaveBala__Leave__4CA06362");

                    b.Navigation("Employee");

                    b.Navigation("LeaveType");
                });

            modelBuilder.Entity("HRMS.Api.Data.Entities.LeaveRequest", b =>
                {
                    b.HasOne("HRMS.Api.Data.Entities.Employee", "Employee")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("HRMS.Api.Data.Entities.LeaveType", "LeaveType")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("LeaveTypeId");

                    b.Navigation("Employee");

                    b.Navigation("LeaveType");
                });

            modelBuilder.Entity("HRMS.Api.Data.Entities.LeaveType", b =>
                {
                    b.HasOne("HRMS.Api.Data.Entities.Company", "Company")
                        .WithMany("LeaveTypes")
                        .HasForeignKey("CompanyId")
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("HRMS.Api.Data.Entities.Role", b =>
                {
                    b.HasOne("HRMS.Api.Data.Entities.Company", "Company")
                        .WithMany("Roles")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("HRMS.Api.Data.Entities.HrmsRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HRMS.Api.Data.Entities.HrmsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HRMS.Api.Data.Entities.HrmsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HRMS.Api.Data.Entities.HrmsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HRMS.Api.Data.Entities.Company", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Employees");

                    b.Navigation("LeaveApprovalLevels");

                    b.Navigation("LeaveTypes");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("HRMS.Api.Data.Entities.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("HRMS.Api.Data.Entities.Employee", b =>
                {
                    b.Navigation("InverseManager");

                    b.Navigation("InverseTeamLead");

                    b.Navigation("LeaveApprovalApproverId1Navigations");

                    b.Navigation("LeaveApprovalApproverId2Navigations");

                    b.Navigation("LeaveApprovalApproverId3Navigations");

                    b.Navigation("LeaveApprovalApproverId4Navigations");

                    b.Navigation("LeaveApprovalApproverId5Navigations");

                    b.Navigation("LeaveBalances");

                    b.Navigation("LeaveRequests");
                });

            modelBuilder.Entity("HRMS.Api.Data.Entities.HrmsRole", b =>
                {
                    b.Navigation("HrmsUserRoles");
                });

            modelBuilder.Entity("HRMS.Api.Data.Entities.HrmsUser", b =>
                {
                    b.Navigation("HrmsUserRoles");
                });

            modelBuilder.Entity("HRMS.Api.Data.Entities.LeaveApprovalLevel", b =>
                {
                    b.Navigation("InverseNextLevel");
                });

            modelBuilder.Entity("HRMS.Api.Data.Entities.LeaveRequest", b =>
                {
                    b.Navigation("LeaveApprovals");
                });

            modelBuilder.Entity("HRMS.Api.Data.Entities.LeaveType", b =>
                {
                    b.Navigation("LeaveApprovalLevels");

                    b.Navigation("LeaveBalances");

                    b.Navigation("LeaveRequests");
                });

            modelBuilder.Entity("HRMS.Api.Data.Entities.Role", b =>
                {
                    b.Navigation("LeaveApprovalLevels");
                });
#pragma warning restore 612, 618
        }
    }
}
